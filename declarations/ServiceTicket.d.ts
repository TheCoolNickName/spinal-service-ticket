import { TicketInterface } from 'spinal-models-ticket/declarations/SpinalTicket';
import { SpinalProcess } from 'spinal-models-ticket/declarations/SpinalProcess';
import { SpinalLogTicket } from 'spinal-models-ticket/declarations/SpinalLogTicket';
export declare class ServiceTicket {
    contextId: string;
    private context;
    private processNames;
    private processes;
    initialized: boolean;
    private steps;
    private tickets;
    private processByStep;
    private stepByProcess;
    private ticketByStep;
    constructor();
    isInitialized(): boolean;
    init(): void;
    addCategory(processId: string, sentence: string): Promise<boolean | string>;
    addSubCategory(categoryId: string, sentence: string): Promise<boolean | string>;
    addStep(stepId: string, processId: string): Promise<boolean | Error>;
    addLocationToTicket(ticketId: string, bimId: string): Promise<boolean>;
    addTicketToProcessWithUser(ticketId: string, processId: string, userId: string): Promise<boolean | Error>;
    addTicketToProcess(ticketId: string, processId: string): Promise<boolean | Error>;
    addTicket(ticketId: string, stepId: string): Promise<boolean | Error>;
    createProcess(process: SpinalProcess): Promise<string | Error>;
    createStep(name: string, color: string): string;
    createTicket(info: TicketInterface): string;
    createLog(info: SpinalLogTicket): string;
    getTicketForUser(userId: string): Promise<any>;
    createArchives(): Promise<boolean | Error>;
    getContext(): Promise<string>;
    getAllProcess(): Set<string>;
    getAllTickets(): Set<string>;
    getStepsFromProcess(processId: string): string[];
    getTicketsFromStep(stepId: string): string[];
    getCategoriesFromProcess(processId: string): Promise<{
        id: string;
        children: string[];
    }[]>;
    moveTicket(ticketId: string, stepFromId: string, stepToId: string): void;
    private getCategories;
    private initVar;
    private retrieveStep;
    private addStepToProcess;
    private addTicketToStep;
    private addTicketToProcessTicketSection;
    private createContext;
    private addSentenceSection;
    private addTicketSection;
    private initProcess;
    private createDefaultSteps;
}
